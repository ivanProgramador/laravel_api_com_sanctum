É um framework de autenticação e autorização.
  Ele pode ser usado parara gerenciar o acesso a recursos da api atraves do uso de tokens.
  para instalar o sanctum esse comando basta "php artisan install:api" porém é preciso entender
  que esse comando vai fazer alterações em algumas configurações do projeto. 

  1 - ele vai alterar o arquivo "app.php"  incluindo variavel api e poantando para api.php 
  2 - ele vai gerar o api.php com uma rota padraão que ja usa o middleware dele 
  3 - vai criar uma migration 2025_10_20_031111_create_personal_access_tokens_table.php 
  4 - ataualizar os jsons do composer com as configurações dele 

  mas tem auma lateração importante que ele não consegue fazer sozinho e ela tem que ser feita 
  para que ele possa funcionar.

  1 - No model "User" tem que colocar esse namespace "use Laravel\Sanctum\HasApiTokens;"
  2 - E na classe tem que adcionar o "HasApiTokens" junto com trate que ja existem dessa forma

      use HasFactory, Notifiable,HasApiTokens; 

  Fazendo o login com o sanctum 

    O primeiro passo foi criar um controller de autenticação que terá o metodo de login, esse metodo 
    sera responsavel por pegar os dado da requisição "email e password" e validar para saber se eles  
    existem dentdo da reuisição e se eles correpondem as condições de validação 

    //validando os dados 
        $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

    se eles não estiverem dentro dos padrões a atenticação não vai deixar passar, mas se sim, 
    vai aocntecer uma tentaiva de login,a conbinação de email e asenha sera comparada a base de dados
    se esse combinação existir o attempt será preenchido com os dados    

       $attempt = auth()->attempt([
            'email' => $email,
            'password' => $password
        ]);

    aqui eu tento se ele está vazio, se estiver a tentativa de login falhou, e eu retorno para o usuario,
    que ele não tem autorização

     if (!$attempt) {
            return response()->json(['message' => 'Não aurtorizado'], 401);
        }

    agora se ele estiver preenchido o usuario vai pra dentro da função auth() indicando que ele está 
    autenticado. 

      $user = auth()->user();

    aqui eu crio a avrivel token qevai opegar os dados do usuario e usar a função createToken do sanctum 
    e gerar um token pra ele com base no nome do usuario 

      $token = $user->createToken($user->name)->plainTextToken; 
    
    depois de criar op token eu tenho que mandar ele para o usuario 

    return response()->json(['token' => $token]);

    agora ele tem um token de login pra acessar a api, sanctum basicamente é aplicado como um middleware nas rotas que ele protege 
    dessa forma essa rota e todas as rotas que forma geradas por ela de foma automática passam ater o seu controle de acesso administrado
    pelo sanctum.  

    Route::apiResource('clients', ClientController::class)->middleware('auth:sanctum');

    para fazer o login no sanctum primeiro precisa acessar a rota de login e enviar os dados via post 
    com os dados do usuario via json 

    {
    	"email":"app_consumer_001@api.com",
	    "password":"Aa123456"
    }

    para essa rota 

     http://localhost/laravel_api_com_sanctum/public/api/login

    então o sanctum vai responder com um token e com os dados do usuario que solicitou 

     {
	    "status_code": 200,
	    "message": "success",
	    "data": {
		    "name": "AppConsumer0001",
		    "email": "app_consumer_001@api.com",
		    "token": "3|vsOtZmmoyVP5gdn7aUO6fxysUPCl4ggIh2aRIvm8706aeb78"
	    }
    }

    Usando o token para ter acesso a api quando se usa um sistema como insominia ou postman 
    tem um atributo de requisição chamado barrer é nesse campo que a chave da api é inserida 
    para ser envida na requisição como foi o sanctum quem gerou a chave ele vai deixar passar 







    



     


  

  

  

  
    

  
